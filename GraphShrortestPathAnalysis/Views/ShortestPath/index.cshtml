@model GraphShortestPathAnalysis.Models.GraphModel
@{
    Layout = "";
}
<!DOCTYPE html>
<style>
    body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #canvas {
        position: relative;
        width: 100%;
        height: 100%;
        border: 1px solid black;
    }

    .hide {
        display: none;
    }

    .controller {
        width: 15%;
        position: absolute;
        left: 3%;
        top: 20%;
        z-index: 1;
        background: #f1f1f1;
        border: 1px solid #ddd;
        padding: 10px;
    }

    ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    li {
        margin: 5px 0 8px;
    }

    button {
        display: block;
        width: 100%;
        padding: 5px 15px;
    }

    .active {
        background: #1d48f1;
        color: #fff;
    }


    #btn_run_algorithm {
        display: block;
        margin-top: 15px;
        background: #ff0000;
        color: #fff;
        padding: 10px 25px;
        font-size: 1.4rem;
    }

    #notification {
        position: fixed;
        background: rgba(0, 0, 0, 0.7);
        border-radius: 25px;
        text-align: center;
        color: #fff;
        padding: 6px 25px 5px;
        bottom: 10px;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    label {
        display: block;
        font-size: 0.9rem;
    }

    input[type=range] {
        width: 100%;
    }

    #algorithmSelection {
        width: 100%;
        height: 20%;
        font-size: medium;
    }

    .modal {
        position: absolute;
        top: 20%;
        left: 40%;
        width: 20%;
        height: 5%;
        font-size: large;
        border: 1px solid black;
        border-radius: 30%;
        text-align: center;
        display: none;
    }
</style>

<meta charset="UTF-8">
<title>Page Title</title>
<body>

    <canvas id="canvas"></canvas>
    <div class="modal"><p>Time is : <span id="timePassed"></span></p></div>
    <div class="controller">
        <ul>
            <li><button id="btn_select">Select</button></li>
            <li><button id="btn_addPoint">Add Point</button></li>
            <li><button id="btn_addEdge">Add Edge</button></li>
            <li id="wrap_animationSpeed">
                <label>Animation Speed <span>(1500ms)</span></label>
                <input type="range" min="0" max="3000" step="500" value="1500">
            </li>
        </ul>
        <p>
            Shortest path <br />from <select id="from"></select> to <select id="to"></select>
        </p>
        <label>Select Algorithm: </label>
        <select id="algorithmSelection">
            <option value="1" selected>Dijksta</option>
            <option value="2">A Star</option>
        </select>
        <div>
            <br />
            <span>Distance : </span><span id="result"></span>
            <br />
            <span>Nodes visited : </span><span id="visitedNodes"></span>
            <br />
        </div>
        <div>
            Number of nodes : <input type="number" id="nodesCount" name="nodesCount" min="1" max="150">
            <br />
            <br />
        </div>
        <button id="randomGraph">Generate random Graph</button>
        <button id="btn_run_algorithm"><i class="fa fa-play icon"></i> Run Algorithm</button>
    </div>
    <div id="notification">Loading...</div>
</body>


<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.min.js" integrity="sha384-cn7l7gDp0eyniUwwAZgrzD06kc/tftFf19TOAs2zVinnD/C7E91j9yyk5//jjpt/" crossorigin="anonymous"></script>
<script>
    var algorithm = $('#algorithmSelection :selected').val();
    var startTime;
    var endTime;
    $(document).ready(function () {
        debugger;
        $('#algorithmSelection').on('change', function () {
            algorithm = $('#algorithmSelection :selected').val();
        })
    });



    const translatePos = {
        x: window.innerWidth / 2,
        y: window.innerHeight / 2
    };

    var list = [];
    var initialPoints = [];
        @foreach(var list in Model.InitialPoints)
        {
            foreach(var item in list)
            {
                @:list.push(@item);
            }
            @:initialPoints.push(list);
            @:list = [];
        };

    initialPoints.map((pointData) => {
        pointData[0] = pointData[0] + translatePos.x;
        pointData[1] = pointData[1] + translatePos.y;
        return pointData;
    });
    var initialEdges = [];
    @foreach(var item in Model.Connections)
            {
                @:initialEdges.push('@item');
            };




    var points = [];
    var edges = [];
    const canvas = document.getElementById("canvas");
    const $canvas = $(canvas);
    const ctx = canvas.getContext("2d");
    const toolsNames = {
        select: 0,
        addPoint: 1,
        addEdge: 2
    };
    const tools = Object.keys(toolsNames).map(toolName => {
        return {
            name: toolName,
            $html: $("#btn_" + toolName)
        };
    });
    const $notification = $("#notification");
    const $btnRunAlgorithm = $("#btn_run_algorithm");
    const $icon = $btnRunAlgorithm.find('.icon');
    const $wrapAnimationSpeed = $('#wrap_animationSpeed');
    const $animationSpeedText = $wrapAnimationSpeed.find('span');
    const $animationSpeedInput = $wrapAnimationSpeed.find('input');
    const $from = $("#from");
    const $to = $("#to");
    const dragPos = { x: 0, y: 0 };
    let animationSpeed = 1500;
    let notificationTimeout;
    let runningTimeout;
    let running = false;
    let trackedCosts = {};
    let processedNodes = [];
    let trackedParents = {};
    let optimalPath = [];
    let startName;
    let endName;
    let graph;
    let hoverPoint;
    let holdingPoint;
    let tmpEdge;
    let activeToolIdx = 0;
    var heuristic = [];
    let aStarCurrentCosts = {};
    let visitedNodes = [];
    var nodesCount = @Model.InitialPoints.Count();


    $('#randomGraph').on("click", function () {
        debugger;
        nodesCount = $('#nodesCount').val()

        $.ajax({
            url: '/ShortestPath/GenerateRandoGraph?nodesCount=' + nodesCount,
            type: 'GET',
            success: function (result) {
                debugger;
                resetVariables();
                initialPoints = [];
                result.initialPoints.forEach(list => {
                    var tempList = [];
                    list.forEach(item => {
                        tempList.push(item);
                    });
                    initialPoints.push(tempList)
                });
                initialPoints.map((pointData) => {
                    pointData[0] = pointData[0] + translatePos.x;
                    pointData[1] = pointData[1] + translatePos.y;
                    return pointData;
                });
                initialEdges = [];
                result.connections.forEach(conn => {
                    initialEdges.push(conn);
                });

                ctx.clearRect(0, 0, canvas.width, canvas.height);

                resetGraph();
                initialize();
                /*updateCanvas();*/
                /*createDijkstraGraph();*/
            }});
    });

    function resetVariables() {
        debugger;
        edges = [];
        points = [];
        trackedCosts = {};
        processedNodes = [];
        trackedParents = {};
        optimalPath = [];
        heuristic = [];
        aStarCurrentCosts = {};
        visitedNodes = [];
        running = false;
        algorithm = 1;
    }

    function Timer(callback, delay) {
        var timerId, start, remaining = delay;

        this.pause = function () {
            window.clearTimeout(timerId);
            remaining -= Date.now() - start;
        };

        this.resume = function () {
            start = Date.now();
            window.clearTimeout(timerId);
            timerId = window.setTimeout(callback, remaining);
        };

        this.resume();
    };

    function getEdge(aName, bName) {
        let foundEdge = null;
        let pointsName;
        edges.every(edge => {
            pointsName = edge.name.split("_");
            if (
                (edge.a.name === aName && edge.b.name === bName) ||
                (edge.b.name === aName && edge.a.name === bName)
            ) {
                foundEdge = edge;
                return false;
            }

            return true;
        });
        return foundEdge;
    }

    function getPoint(name) {

        return points[name.charCodeAt(0) - 65];
    }

    function getHeuristicPoint(name) {
        if (name == undefined) {
            return undefined;
        }
        return heuristic[name.charCodeAt(0) - 65];
    }

    function getPointsDistance(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
    }

    function drawTmpEdge() {
        ctx.strokeStyle = "#000";
        ctx.setLineDash([5, 5]);
        ctx.beginPath();
        ctx.lineWidth = 2;
        ctx.moveTo(tmpEdge.a.x, tmpEdge.a.y);
        ctx.lineTo(tmpEdge.b.x, tmpEdge.b.y);
        ctx.stroke();
        ctx.closePath();
        ctx.setLineDash([]);
    }

    function updateCanvas() {
        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);

        if (tmpEdge) {
            drawTmpEdge();
        }

        edges.forEach(edge => {
            ctx.strokeStyle = !edge.shortestPath ? "#000" : "#ff0000";
            if (edge.processed) {
                ctx.strokeStyle = "#ff0000";
            }

            if (edge.shortestPath) {
                ctx.strokeStyle = "#00ff00";
            }

            ctx.beginPath();
            ctx.lineWidth = 2;
            ctx.moveTo(edge.a.x, edge.a.y);
            ctx.lineTo(edge.b.x, edge.b.y);
            ctx.stroke();
            ctx.closePath();

            ctx.font = "12px Arial";
            ctx.textBaseline = "top";
            ctx.fillStyle = "#000";
            ctx.fillText(
                edge.cost,
                (edge.a.x + edge.b.x) / 2 + 5,
                (edge.a.y + edge.b.y) / 2 + 8
            );
        });

        points.forEach(point => {
            ctx.fillStyle = "#fff";
            const isProcessed = processedNodes.includes(point.name);
            const cost = trackedCosts[point.name];
            if (isProcessed) {
                ctx.fillStyle = "#ff0000";
            }

            if (point.processing) {
                ctx.fillStyle = "#00ff00";
            }

            if (optimalPath.indexOf(point.name) !== -1) {
                ctx.fillStyle = "#00ff00";
            }
            ctx.strokeStyle = "#142f9a";
            ctx.beginPath();
            ctx.arc(point.x, point.y, point.hover ? 7 : 5, 0, 2 * Math.PI);
            ctx.fill();
            ctx.stroke();
            ctx.closePath();
            ctx.fillStyle = !isProcessed ? "#000" : "#ff0000";
            ctx.font = "bold 20px Arial";
            ctx.textBaseline = "top";
            ctx.fillText(point.name, point.x + 5, point.y + 8);

            if (algorithm == 2) {
                const heuristicLength = getHeuristicPoint(point.name);
                ctx.font = "bold 11px Arial";
                ctx.fillText(`(${heuristicLength.expectedLength})`, point.x + 20, point.y + 20);
            }

            if (cost) {
                ctx.font = "bold 11px Arial";
                ctx.fillText(`(${cost === Infinity ? '∞' : cost})`, point.x + 20, point.y + 8);
            }
        });
    }

    function findLowestCostNode() {
        var costs;
        if (algorithm == 2) {
            var test = Object.keys(aStarCurrentCosts).length;
            costs = test == 0 ? trackedCosts : aStarCurrentCosts;
        }
        else {
            costs = trackedCosts;
        }

        const processed = processedNodes;
        const knownNodes = Object.keys(costs);

        const lowestCostNode = knownNodes.reduce((acc, node) => {
            let lowest = acc;
            if (lowest === null && !processed.includes(node)) {
                lowest = node;
            }
            if (costs[node] < costs[lowest] && !processed.includes(node)) {
                lowest = node;
            }
            return lowest;
        }, null);
        aStarCurrentCosts[lowestCostNode] = Infinity;
        return lowestCostNode;
    }

    function createDijkstraGraph() {
        debugger;
        graph = {};
        let pointsName;
        let pointA;
        let pointB;

        points.forEach(point => (graph[point.name] = {}));

        edges.forEach(edge => {
            pointsName = edge.name.split("_");

            graph[edge.a.name][edge.b.name] = edge.cost;
            graph[edge.b.name][edge.a.name] = edge.cost;
        });
    }

    function calculatePath() {
        debugger;
        let parent = endName;
        let nextParent;
        let uniqueChars = [...new Set(visitedNodes)];
        let edge;
        while (parent) {
            optimalPath.push(parent);
            nextParent = trackedParents[parent];

            if (nextParent) {
                edge = getEdge(parent, nextParent);
                edge.shortestPath = true;
            }

            parent = nextParent;
        }
        optimalPath.reverse();

        const results = {
            distance: trackedCosts[endName],
            path: optimalPath
        };

        console.log(results);
        $('#result').text(results.distance);
        $('#visitedNodes').text(uniqueChars.length);
        updateCanvas();
        $icon.removeClass('fa-pause').addClass('fa-play');
        running = false;
        $('#btn_run_algorithm').text("Run Algorithm");
    }

    function calculateChilds(node, index) {
        debugger;
        const childsKeys = Object.keys(graph[node]);
        const costToReachNode = trackedCosts[node];
        const childrenOfNode = graph[node];
        const child = childsKeys[index];
        const costFromNodetoChild = childrenOfNode[child];
        var costToChild = costToReachNode + costFromNodetoChild;

        const edge = getEdge(node, child);

        if (!child) {
            getPoint(node).processing = false;
            calculateNode();
            return;
        }

        if (edge.processed) {
            calculateChilds(node, index + 1);
            return;
        }

        if (!trackedCosts[child] || trackedCosts[child] > costToChild) {
            showNotification(`calculate ${node}-${child}: ${costToChild} < ${trackedCosts[child]}, updating ${child} cost...`, animationSpeed);
            trackedCosts[child] = costToChild;
            trackedParents[child] = node;
        } else {
            showNotification(`calculate ${node}-${child}: ${costToChild} > ${trackedCosts[child]}, maintain ${child} cost...`, animationSpeed);
        }

        edge.processed = true;
        updateCanvas();

        runningTimeout = new Timer(() => {
            calculateChilds(node, index + 1);
        }, animationSpeed);
    }

    function calculateNode() {
        debugger;
        const node = findLowestCostNode();
        visitedNodes.push(node);
        showNotification(`get lowest cost non-visited node: ${node}`, animationSpeed);

        if (!node || node == endName) {
            calculatePath();
            return;
        }

        getPoint(node).processing = true;
        processedNodes.push(node);
        updateCanvas();
        var isAStar = algorithm == 2 ? true : false;
        //runningTimeout = new Timer(() => {
        //    if (isAStar) {
        //        calculateAStarChild(node, 0);
        //    }
        //    else {
        //        calculateChilds(node, 0);
        //    }
        //}, animationSpeed);

        //setInterval(() => {
        //    if (isAStar) {
        //        calculateAStarChild(node, 0);
        //    }
        //    else {
        //        calculateChilds(node, 0);
        //    }
        //}, animationSpeed )

        setTimeout(() => {
            if (isAStar) {
                calculateAStarChild(node, 0);
            }
            else {
                calculateChilds(node, 0);
            }
        }, animationSpeed)
    }

    function resetGraph() {

        edges.forEach(edge => {
            edge.shortestPath = false;
            edge.processed = false;
        });

        points.forEach(point => {
            point.processed = false;
        });

        trackedCosts = {};
        processedNodes = [];
        trackedParents = {};
        optimalPath = [];
        if (runningTimeout) {
            clearTimeout(runningTimeout);
        }
    }

    function runDijkstra() {
        debugger;
        startName = $from.val();
        endName = $to.val();

        resetGraph();

        points.forEach(point => {
            trackedCosts[point.name] = Infinity;
        });
        trackedCosts[startName] = 0;

        calculateNode();
    }

    function updateEdgesCost() {

        edges.forEach(edge => {
            edge.cost = parseInt(
                getPointsDistance(edge.a.x, edge.a.y, edge.b.x, edge.b.y),
                10
            );
        });
    }

    function addNewEdge(pointA, pointB) {

        if (pointA === pointB || getEdge(pointA.name, pointB.name) !== null) {
            return;
        }

        edges.push({
            name: `${pointA.name}_${pointB.name}`,
            a: pointA,
            b: pointB,
            cost: null
        });
        updateEdgesCost();
    }

    function createPointHtml(point) {

        const $option = $(document.createElement("option"));
        $option.html(point.name);
        $option.val(point.name);
        $from.append($option.clone());
        $to.append($option.clone());
    }

    function addNewPoint(x, y) {

        const pointData = {
            name: String.fromCharCode(65 + points.length),
            x,
            y
        };
        points.push(pointData);
        createPointHtml(pointData);
        updateCanvas();
    }

    function runAlgorithm() {
        debugger;
        running = true;
        $icon.removeClass('fa-play').addClass('fa-pause');
        createDijkstraGraph();
        if (algorithm == 2) {
            runAStar();
        }
        else {
            runDijkstra();
        }
        return;
    }

    function onDragPoint(state) {

        const { evt } = state;
        const { x, y } = dragPos;
        holdingPoint.x = holdingPoint.x + (evt.clientX - x);
        holdingPoint.y = holdingPoint.y + (evt.clientY - y);
        dragPos.x = evt.clientX;
        dragPos.y = evt.clientY;
        updateEdgesCost();
        state.cursor = 'grabbing';
        state.needUpdate = true;
    }

    function updateHoverPoint(state) {
        let dist;
        let minDist = 10;
        points.forEach(point => {
            dist = getPointsDistance(state.evt.clientX, state.evt.clientY, point.x, point.y);

            if (point.hover && dist >= minDist) {
                hoverPoint = null;
                point.hover = false;
                state.needUpdate = true;
                return;
            }

            point.hover = false;

            if (dist < minDist) {
                hoverPoint = point;
                hoverPoint.hover = true;
                state.needUpdate = true;
            }
        });
    }

    function onMouseMove(evt) {
        const state = { evt, needUpdate: false, cursor: null };

        updateHoverPoint(state);

        switch (activeToolIdx) {
            case toolsNames.addEdge:
                if (hoverPoint) {
                    state.cursor = 'crosshair';
                }
                if (tmpEdge) {
                    tmpEdge.b.x = evt.clientX;
                    tmpEdge.b.y = evt.clientY;
                    state.needUpdate = true;
                }
                break;
            case toolsNames.addPoint:
                state.cursor = 'cell';
                if (hoverPoint) {
                    state.cursor = 'no-drop';
                }
                break;
            case toolsNames.select:
                if (hoverPoint) {
                    state.cursor = 'grab';
                }

                if (holdingPoint) {
                    onDragPoint(state);
                }
                break;
        }

        $canvas.css({ cursor: state.cursor || '' });

        if (state.needUpdate) {
            updateCanvas();
        }
    }

    function onMouseUp(evt) {
        switch (activeToolIdx) {
            case toolsNames.addEdge:
                if (tmpEdge && hoverPoint) {
                    addNewEdge(tmpEdge.a, hoverPoint);
                }
                tmpEdge = null;
                updateCanvas();
                break;
            case toolsNames.select:
                holdingPoint = null;
                break;
        }

        $(document).off("mouseup", onMouseUp);
    }

    function onMouseDown(evt) {
        if (evt.target !== canvas) {
            return;
        }

        switch (activeToolIdx) {
            case toolsNames.addEdge:
                if (!hoverPoint) {
                    return;
                }

                tmpEdge = {
                    a: hoverPoint,
                    b: { x: evt.clientX, y: evt.clientY }
                };
                break;
            case toolsNames.addPoint:
                if (hoverPoint) {
                    return;
                }

                addNewPoint(evt.clientX, evt.clientY)
                break;
            case toolsNames.select:
                if (!hoverPoint) {
                    return;
                }

                dragPos.x = evt.clientX;
                dragPos.y = evt.clientY;
                holdingPoint = hoverPoint;
                break;
        }

        $(document).on("mouseup", onMouseUp);
    }

    function onWindowResize() {

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        updateCanvas();
    }

    function showNotification(text, duration) {

        $notification
            .removeClass('hide')
            .html(text);

        notificationTimeout = new Timer(() => {
            $notification.addClass('hide');
        }, duration);
    }

    function selectTool(toolIdx) {

        activeToolIdx = toolIdx;

        tools.forEach(tool => tool.$html.removeClass("active"));
        tools[activeToolIdx].$html.addClass("active");
    }

    function onAnimationSpeedChange(evt) {

        $animationSpeedText.html(`(${evt.currentTarget.value})`);
        animationSpeed = parseInt(evt.currentTarget.value, 10);
    }

    function onRunClick() {
        debugger;
        if (!running) {
            runAlgorithm();
            $('#btn_run_algorithm').text("Pause");
            return;
        }

        if ($icon.hasClass('fa-pause')) {
            $icon.removeClass('fa-pause').addClass('fa-play');
            $('#btn_run_algorithm').text("Run Algorithm");
            runningTimeout.pause();
            notificationTimeout.pause();
            return
        } else {
            $icon.removeClass('fa-play').addClass('fa-pause');
            $('#btn_run_algorithm').text("Pause");
            runningTimeout.resume;
            notificationTimeout.resume;
        }

    }

    function initialize() {
        debugger;
        // Points
        initialPoints.forEach(pointPos => {
            const pointData = {
                name: String.fromCharCode(65 + points.length),
                x: pointPos[0],
                y: pointPos[1]
            };
            points.push(pointData);
            createPointHtml(pointData);
        });
        $to.val(points[points.length - 1].name);

        // Edges
        let pointA;
        let pointB;
        initialEdges.forEach((edgeName) => {
            pointA = points[edgeName.charCodeAt(0) - 65];
            pointB = points[edgeName.charCodeAt(2) - 65];
            addNewEdge(pointA, pointB);
        });

        // Tools
        tools.forEach((tool, i) => tool.$html.on("click", () => selectTool(i)));
        selectTool(toolsNames.select);

        $('#nodesCount').val(nodesCount);

        $btnRunAlgorithm.on('click', function () {
            debugger;
            algorithm = $('#algorithmSelection :selected').val();
            if (algorithm == 1) {
                onRunClick();
            }
            else {
                startAStar();
            }
        });
        $animationSpeedInput.on('change', onAnimationSpeedChange);

        $(document)
            .on("mousemove", onMouseMove)
            .on("mousedown", onMouseDown);
        $(window).on('resize', onWindowResize);

        $notification.addClass('hide');

        onWindowResize();
    }

    function startAStar() {

        endName = $to.val();
        var endpoint = getPoint(endName);

        points.forEach((point) => {
            const singlePoint = {
                name: point.name,
                expectedLength: Math.floor(getPointsDistance(point.x, point.y, endpoint.x, endpoint.y))
            };
            heuristic.push(singlePoint);
        });
        updateCanvas();
        onRunClick();

    }

    function runAStar() {
        startName = $from.val();
        endName = $to.val();

        resetGraph();

        points.forEach(point => {
            trackedCosts[point.name] = Infinity;
        });
        trackedCosts[startName] = 0;
        visitedNodes = [];
        calculateNode();
    }

    function calculateAStarChild(node, index) {

        const childsKeys = Object.keys(graph[node]);
        const costToReachNode = trackedCosts[node];
        const childrenOfNode = graph[node];
        const child = childsKeys[index];
        const costFromNodetoChild = childrenOfNode[child];
        var costToChild;

        var heuristicLength = getHeuristicPoint(child) == undefined ? undefined : getHeuristicPoint(child).expectedLength;
        costToChild = costToReachNode + costFromNodetoChild + heuristicLength;

        const edge = getEdge(node, child);

        if (!child) {
            getPoint(node).processing = false;
            calculateNode();
            return;
        }

        if (edge.processed) {
            calculateAStarChild(node, index + 1);
            return;
        }
        aStarCurrentCosts[child] = costToChild;

        if (!trackedCosts[child] || trackedCosts[child] > costToChild) {
            showNotification(`calculate ${node}-${child}: ${costToChild} < ${trackedCosts[child]}, updating ${child} cost...`, animationSpeed);
            trackedCosts[child] = costToReachNode + costFromNodetoChild;
            trackedParents[child] = node;
        } else {
            showNotification(`calculate ${node}-${child}: ${costToChild} > ${trackedCosts[child]}, maintain ${child} cost...`, animationSpeed);
        }

        edge.processed = true;
        updateCanvas();

        runningTimeout = new Timer(() => {
            calculateAStarChild(node, index + 1);
        }, animationSpeed);
    }

    initialize();
</script>


